name: Build and Push Docker Images to ECR

on:
  workflow_dispatch:
    inputs:
      aws_env:
        description: 'Choose the environment to build for'
        type: choice
        required: true
        options:
          - dev
          - test
          - prod
      git_ref:
        description: 'Git ref to build from'
        required: false
        default: "main"

permissions:
  id-token: write
  contents: read

jobs:
  set-env:
    name: Set Environment Configuration
    runs-on: ubuntu-latest
    outputs:
      aws-region: ${{ steps.env-config.outputs.aws-region }}
      aws-account: ${{ steps.env-config.outputs.aws-account }}
    steps:
      - name: Set AWS configuration
        id: env-config
        run: |
          case "${{ inputs.aws_env }}" in
            dev)
              echo "aws-region=us-east-1" >> $GITHUB_OUTPUT
              echo "aws-account=967282559097" >> $GITHUB_OUTPUT
              ;;
            test)
              echo "aws-region=us-west-2" >> $GITHUB_OUTPUT
              echo "aws-account=266324747922" >> $GITHUB_OUTPUT
              ;;
            prod)
              echo "aws-region=us-west-2" >> $GITHUB_OUTPUT
              echo "aws-account=112118296049" >> $GITHUB_OUTPUT
              ;;
          esac

  build-delly:
    needs: set-env
    name: Build and Push delly
    runs-on: ubuntu-latest
    env:
      AWS_REGION: ${{ needs.set-env.outputs.aws-region }}
      AWS_ACCOUNT: ${{ needs.set-env.outputs.aws-account }}
      ECR_REPOSITORY: nf-secondary-delly
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ inputs.git_ref }}
          fetch-depth: 0

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ env.AWS_REGION }}
          role-to-assume: arn:aws:iam::${{ env.AWS_ACCOUNT }}:role/GitHubRunner-role

      - name: Login to Amazon ECR
        id: ecr-login
        uses: aws-actions/amazon-ecr-login@v1

      - name: Get Short SHA
        id: short-sha
        run: echo "short-sha=$(echo ${{ github.sha }} | cut -c1-7)" >> $GITHUB_OUTPUT

      - name: Determine image tag
        id: image-tag
        run: |
          if [[ "${{ inputs.git_ref }}" =~ ^v?[0-9]+\.[0-9]+ ]] || [[ "${{ inputs.git_ref }}" =~ ^[0-9]+\.[0-9]+\.[0-9]+ ]]; then
            # Looks like a tag
            TAG="${{ inputs.git_ref }}"
          else
            # Treat as branch
            TAG="${{ inputs.git_ref }}-${{ steps.short-sha.outputs.short-sha }}"
          fi
          echo "tag=${TAG}" >> $GITHUB_OUTPUT

      - name: Build and push delly
        uses: docker/build-push-action@v5
        with:
          context: .
          file: docker_files/delly.Dockerfile
          push: true
          tags: ${{ steps.ecr-login.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${{ steps.image-tag.outputs.tag }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          provenance: false

  build-jasmine:
    needs: set-env
    name: Build and Push jasmine
    runs-on: ubuntu-latest
    env:
      AWS_REGION: ${{ needs.set-env.outputs.aws-region }}
      AWS_ACCOUNT: ${{ needs.set-env.outputs.aws-account }}
      ECR_REPOSITORY: nf-secondary-jasmine
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ inputs.git_ref }}
          fetch-depth: 0

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ env.AWS_REGION }}
          role-to-assume: arn:aws:iam::${{ env.AWS_ACCOUNT }}:role/GitHubRunner-role

      - name: Login to Amazon ECR
        id: ecr-login
        uses: aws-actions/amazon-ecr-login@v1

      - name: Get Short SHA
        id: short-sha
        run: echo "short-sha=$(echo ${{ github.sha }} | cut -c1-7)" >> $GITHUB_OUTPUT

      - name: Determine image tag
        id: image-tag
        run: |
          if [[ "${{ inputs.git_ref }}" =~ ^v?[0-9]+\.[0-9]+ ]] || [[ "${{ inputs.git_ref }}" =~ ^[0-9]+\.[0-9]+\.[0-9]+ ]]; then
            # Looks like a tag
            TAG="${{ inputs.git_ref }}"
          else
            # Treat as branch
            TAG="${{ inputs.git_ref }}-${{ steps.short-sha.outputs.short-sha }}"
          fi
          echo "tag=${TAG}" >> $GITHUB_OUTPUT

      - name: Build and push jasmine
        uses: docker/build-push-action@v5
        with:
          context: .
          file: docker_files/jasmine.Dockerfile
          push: true
          tags: ${{ steps.ecr-login.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${{ steps.image-tag.outputs.tag }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          provenance: false

  build-manta:
    needs: set-env
    name: Build and Push manta
    runs-on: ubuntu-latest
    env:
      AWS_REGION: ${{ needs.set-env.outputs.aws-region }}
      AWS_ACCOUNT: ${{ needs.set-env.outputs.aws-account }}
      ECR_REPOSITORY: nf-secondary-manta
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ inputs.git_ref }}
          fetch-depth: 0

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ env.AWS_REGION }}
          role-to-assume: arn:aws:iam::${{ env.AWS_ACCOUNT }}:role/GitHubRunner-role

      - name: Login to Amazon ECR
        id: ecr-login
        uses: aws-actions/amazon-ecr-login@v1

      - name: Get Short SHA
        id: short-sha
        run: echo "short-sha=$(echo ${{ github.sha }} | cut -c1-7)" >> $GITHUB_OUTPUT

      - name: Determine image tag
        id: image-tag
        run: |
          if [[ "${{ inputs.git_ref }}" =~ ^v?[0-9]+\.[0-9]+ ]] || [[ "${{ inputs.git_ref }}" =~ ^[0-9]+\.[0-9]+\.[0-9]+ ]]; then
            # Looks like a tag
            TAG="${{ inputs.git_ref }}"
          else
            # Treat as branch
            TAG="${{ inputs.git_ref }}-${{ steps.short-sha.outputs.short-sha }}"
          fi
          echo "tag=${TAG}" >> $GITHUB_OUTPUT

      - name: Build and push manta
        uses: docker/build-push-action@v5
        with:
          context: .
          file: docker_files/manta.Dockerfile
          push: true
          tags: ${{ steps.ecr-login.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${{ steps.image-tag.outputs.tag }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          provenance: false

  build-svcalling-pipeline:
    needs: set-env
    name: Build and Push svcalling-pipeline
    runs-on: ubuntu-latest
    env:
      AWS_REGION: ${{ needs.set-env.outputs.aws-region }}
      AWS_ACCOUNT: ${{ needs.set-env.outputs.aws-account }}
      ECR_REPOSITORY: nf-secondary-svcalling-pipeline
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ inputs.git_ref }}
          fetch-depth: 0

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ env.AWS_REGION }}
          role-to-assume: arn:aws:iam::${{ env.AWS_ACCOUNT }}:role/GitHubRunner-role

      - name: Login to Amazon ECR
        id: ecr-login
        uses: aws-actions/amazon-ecr-login@v1

      - name: Get Short SHA
        id: short-sha
        run: echo "short-sha=$(echo ${{ github.sha }} | cut -c1-7)" >> $GITHUB_OUTPUT

      - name: Determine image tag
        id: image-tag
        run: |
          if [[ "${{ inputs.git_ref }}" =~ ^v?[0-9]+\.[0-9]+ ]] || [[ "${{ inputs.git_ref }}" =~ ^[0-9]+\.[0-9]+\.[0-9]+ ]]; then
            # Looks like a tag
            TAG="${{ inputs.git_ref }}"
          else
            # Treat as branch
            TAG="${{ inputs.git_ref }}-${{ steps.short-sha.outputs.short-sha }}"
          fi
          echo "tag=${TAG}" >> $GITHUB_OUTPUT

      - name: Build and push svcalling-pipeline
        uses: docker/build-push-action@v5
        with:
          context: .
          file: docker_files/svcalling-pipeline.Dockerfile
          push: true
          tags: ${{ steps.ecr-login.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${{ steps.image-tag.outputs.tag }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          provenance: false

  build-truvari:
    needs: set-env
    name: Build and Push truvari
    runs-on: ubuntu-latest
    env:
      AWS_REGION: ${{ needs.set-env.outputs.aws-region }}
      AWS_ACCOUNT: ${{ needs.set-env.outputs.aws-account }}
      ECR_REPOSITORY: nf-secondary-truvari
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ inputs.git_ref }}
          fetch-depth: 0

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ env.AWS_REGION }}
          role-to-assume: arn:aws:iam::${{ env.AWS_ACCOUNT }}:role/GitHubRunner-role

      - name: Login to Amazon ECR
        id: ecr-login
        uses: aws-actions/amazon-ecr-login@v1

      - name: Get Short SHA
        id: short-sha
        run: echo "short-sha=$(echo ${{ github.sha }} | cut -c1-7)" >> $GITHUB_OUTPUT

      - name: Determine image tag
        id: image-tag
        run: |
          if [[ "${{ inputs.git_ref }}" =~ ^v?[0-9]+\.[0-9]+ ]] || [[ "${{ inputs.git_ref }}" =~ ^[0-9]+\.[0-9]+\.[0-9]+ ]]; then
            # Looks like a tag
            TAG="${{ inputs.git_ref }}"
          else
            # Treat as branch
            TAG="${{ inputs.git_ref }}-${{ steps.short-sha.outputs.short-sha }}"
          fi
          echo "tag=${TAG}" >> $GITHUB_OUTPUT

      - name: Build and push truvari
        uses: docker/build-push-action@v5
        with:
          context: .
          file: docker_files/truvari.Dockerfile
          push: true
          tags: ${{ steps.ecr-login.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${{ steps.image-tag.outputs.tag }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          provenance: false
