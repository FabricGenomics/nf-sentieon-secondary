name: Build and Push Docker Images to ECR

on:
  push:
    branches:
      - main
    tags:
      - '*'
  workflow_dispatch:

env:
  AWS_REGION: us-west-2
  ECR_REGISTRY: 112118296049.dkr.ecr.us-west-2.amazonaws.com

jobs:
  build-delly:
    name: Build and Push delly
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}
          role-session-name: github-actions-ecr-push

      - name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v2

      - name: Determine image tag
        id: image-tag
        run: |
          if [[ "${{ github.ref }}" == refs/tags/* ]]; then
            TAG="${{ github.ref_name }}"
          else
            BRANCH=$(echo "${{ github.ref_name }}" | sed 's/[^a-zA-Z0-9._-]/-/g')
            SHORT_SHA=$(echo ${{ github.sha }} | cut -c1-7)
            TAG="${BRANCH}-${SHORT_SHA}"
          fi
          echo "tag=${TAG}" >> $GITHUB_OUTPUT
          echo "Image tag: ${TAG}"

      - name: Build and push delly
        uses: docker/build-push-action@v5
        with:
          context: .
          file: docker_files/delly.Dockerfile
          push: true
          tags: ${{ env.ECR_REGISTRY }}/nf-secondary-delly:${{ steps.image-tag.outputs.tag }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          provenance: false

  build-jasmine:
    name: Build and Push jasmine
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}
          role-session-name: github-actions-ecr-push

      - name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v2

      - name: Determine image tag
        id: image-tag
        run: |
          if [[ "${{ github.ref }}" == refs/tags/* ]]; then
            TAG="${{ github.ref_name }}"
          else
            BRANCH=$(echo "${{ github.ref_name }}" | sed 's/[^a-zA-Z0-9._-]/-/g')
            SHORT_SHA=$(echo ${{ github.sha }} | cut -c1-7)
            TAG="${BRANCH}-${SHORT_SHA}"
          fi
          echo "tag=${TAG}" >> $GITHUB_OUTPUT
          echo "Image tag: ${TAG}"

      - name: Build and push jasmine
        uses: docker/build-push-action@v5
        with:
          context: .
          file: docker_files/jasmine.Dockerfile
          push: true
          tags: ${{ env.ECR_REGISTRY }}/nf-secondary-jasmine:${{ steps.image-tag.outputs.tag }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          provenance: false

  build-manta:
    name: Build and Push manta
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}
          role-session-name: github-actions-ecr-push

      - name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v2

      - name: Determine image tag
        id: image-tag
        run: |
          if [[ "${{ github.ref }}" == refs/tags/* ]]; then
            TAG="${{ github.ref_name }}"
          else
            BRANCH=$(echo "${{ github.ref_name }}" | sed 's/[^a-zA-Z0-9._-]/-/g')
            SHORT_SHA=$(echo ${{ github.sha }} | cut -c1-7)
            TAG="${BRANCH}-${SHORT_SHA}"
          fi
          echo "tag=${TAG}" >> $GITHUB_OUTPUT
          echo "Image tag: ${TAG}"

      - name: Build and push manta
        uses: docker/build-push-action@v5
        with:
          context: .
          file: docker_files/manta.Dockerfile
          push: true
          tags: ${{ env.ECR_REGISTRY }}/nf-secondary-manta:${{ steps.image-tag.outputs.tag }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          provenance: false

  build-svcalling-pipeline:
    name: Build and Push svcalling-pipeline
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}
          role-session-name: github-actions-ecr-push

      - name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v2

      - name: Determine image tag
        id: image-tag
        run: |
          if [[ "${{ github.ref }}" == refs/tags/* ]]; then
            TAG="${{ github.ref_name }}"
          else
            BRANCH=$(echo "${{ github.ref_name }}" | sed 's/[^a-zA-Z0-9._-]/-/g')
            SHORT_SHA=$(echo ${{ github.sha }} | cut -c1-7)
            TAG="${BRANCH}-${SHORT_SHA}"
          fi
          echo "tag=${TAG}" >> $GITHUB_OUTPUT
          echo "Image tag: ${TAG}"

      - name: Build and push svcalling-pipeline
        uses: docker/build-push-action@v5
        with:
          context: .
          file: docker_files/svcalling-pipeline.Dockerfile
          push: true
          tags: ${{ env.ECR_REGISTRY }}/nf-secondary-svcalling-pipeline:${{ steps.image-tag.outputs.tag }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          provenance: false

  build-truvari:
    name: Build and Push truvari
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}
          role-session-name: github-actions-ecr-push

      - name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v2

      - name: Determine image tag
        id: image-tag
        run: |
          if [[ "${{ github.ref }}" == refs/tags/* ]]; then
            TAG="${{ github.ref_name }}"
          else
            BRANCH=$(echo "${{ github.ref_name }}" | sed 's/[^a-zA-Z0-9._-]/-/g')
            SHORT_SHA=$(echo ${{ github.sha }} | cut -c1-7)
            TAG="${BRANCH}-${SHORT_SHA}"
          fi
          echo "tag=${TAG}" >> $GITHUB_OUTPUT
          echo "Image tag: ${TAG}"

      - name: Build and push truvari
        uses: docker/build-push-action@v5
        with:
          context: .
          file: docker_files/truvari.Dockerfile
          push: true
          tags: ${{ env.ECR_REGISTRY }}/nf-secondary-truvari:${{ steps.image-tag.outputs.tag }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          provenance: false
